-》问题：
接口对接：周立功红盒子驱动-》ISOTP层-》UDS层  已解决

-》问题：打开端口后 如何更改物理 功能寻址 采用如下方式	
        self._isotpaddr_PHYS = isotp.Address(isotp.AddressingMode.Normal_11bits, txid=ESC_RX_ID_PHYS, rxid=ESC_TX_ID)
        self._isotpaddr_FUNC = isotp.Address(isotp.AddressingMode.Normal_11bits, txid=ESC_RX_ID_FUNC, rxid=ESC_TX_ID)							
        self.isotp_layer.set_address(self._isotpaddr_FUNC) //如果为物理寻址方式发送，更改参数为self._isotpaddr_PHYS即可
        self.udsclient.change_session(3)
		
-》问题：接收报错，原因IOSTP中的结构定义与周立功的CAN帧结构不匹配，需更改protocol.py源文件；
更改后进行了周期为1ms的通信测试，发送100帧验证是否有丢失，测试通过

将如下：		
if msgs is not None:    
self.logger.debug("Receiving :  (%d)\t %s" % (msg.arbitration_id, len(msg.data), binascii.hexlify(msg.data)))    self.process_rx(msg)    
更改为：
if msg is not None:
    # print(msg)
    for zlgmsg in msg:
        msgs = CanMessage(arbitration_id=zlgmsg.ID, data=zlgmsg.Data, dlc=zlgmsg.DataLen,extended_id=False)
    # self.logger.debug("Receiving :  (%d)\t %s" % (msgs.arbitration_id, len(msgs.data), binascii.hexlify(msgs.data)))
        print("rec:id-%d,dlc-%d,data-%s" % (msgs.arbitration_id,msgs.dlc, binascii.hexlify(msgs.data)))
        self.process_rx(msgs)

-》问题：如何发送任意数据帧
1、self.udsclient.change_session()，参见手册发送15765规定的功能
2、发送任意帧方法：struct.pack使用方法见 https://blog.csdn.net/weiwangchao_/article/details/80395941
payload_send = struct.pack("BBBBBBBB", 0x01, 0x01, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00)		
self.conn.send(payload_send)
payload_rcv = self.conn.wait_frame(timeout=10)

-》发送完诊断功能后的肯定响应与否定响应如何接收，并进行判断的？解决
返回response类型值，该返回结果包含肯定/否定响应
		
-》如何更改P2？timeout的值如何更改？解决
更改P2值： self.udsclient.config['p2_timeout'] == 3  以秒为单位

-》指定接收ID，rxid-否则报错，self._isotpaddr_FUNC = isotp.Address(isotp.AddressingMode.Normal_11bits, txid=ESC_RX_ID_FUNC, rxid=ESC_TX_ID)

-》logger使用，代码中默认级别为warnning，需更改调试等级
更改client.py文件，函数configure_logger如下
    def configure_logger(self):
        logger_name = 'UdsClient'
        if 'logger_name' in self.config:
            logger_name = "UdsClient[%s]" % self.config['logger_name']

        self.logger = logging.getLogger(logger_name)
        # self.logger.setLevel(logging.DEBUG)
        self.logger.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        sh = logging.StreamHandler()
        sh.setLevel(logging.DEBUG)
        sh.setFormatter(formatter)
        self.logger.addHandler(sh)
        print(self.logger)
		
-》接收超时 client.py
        if self.config['standard_version'] > 2006:
            if self.config['use_server_timing']:
                self.logger.info('%s - Received new timing parameters. P2=%.3fs and P2*=%.3fs.  Using these value from now on.' % (self.service_log_prefix(services.DiagnosticSessionControl), response.service_data.p2_server_max, response.service_data.p2_star_server_max))
                self.session_timing['p2_server_max'] = response.service_data.p2_server_max
                self.session_timing['p2_server_max'] = 5
                self.session_timing['p2_star_server_max'] = response.service_data.p2_star_server_max
				
-》DTC相关操作函数
	通过状态掩码报告DTC ：get_dtc_by_status_mask(1)
		sed:id-0x7df,dlc-8,data-b'0319020100000000'
		rec:id-0x718,dlc-8,data-b'105f590209c11187'
	通过状态掩码报告DTC数目：get_number_of_dtc_by_status_mask(0) 
		sed:id-0x7df,dlc-8,data-b'0319010000000000'
		rec:id-0x718,dlc-8,data-b'0659010900000055'